{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["TodoApp","state","task","handlePressKey","event","key","value","target","_this","props","addTodo","setState","handleOnChange","react_default","a","createElement","className","placeholder","this","onKeyPress","onChange","Component","TodoItem","handleClickCheckBox","_ref","id","length","changeCompleted","handleClickButtonDestroy","_ref2","idInput","parentNode","children","idTodo","removeTodos","handleLabelClick","preventDefault","handleLableDoubleClick","_ref3","parentLi","closest","newInput","document","innerText","classList","add","onkeydown","handlePressKeyNewInput","append","idMainInput","editTask","remove","removeChild","_this$props$item","item","title","completed","type","concat","checked","htmlFor","onClick","onDoubleClick","TodoList","filter","handleClickButtonClear","_this$props","items","map","handleFilters","getAttribute","slice","handleToogleAll","setCompletedAll","_this$props2","filteredTodos","list","switcher","Object","toConsumableArray","createFilteredTodos","Fragment","style","display","every","components_TodoItem_TodoItem","href","some","App","listTodos","localStorage","getItem","JSON","parse","prevState","sort","b","ids","includes","_objectSpread","stateCompleted","newTitle","setItem","stringify","components_TodoApp_TodoApp","components_TodoList_TodoList","ReactDOM","render","src_App","getElementById"],"mappings":"qSA6CeA,6MAzCbC,MAAQ,CACNC,KAAM,MAGRC,eAAiB,SAACC,GAAU,IAClBC,EAAQD,EAARC,IACAC,EAAUF,EAAMG,OAAhBD,MAEI,UAARD,IACFG,EAAKC,MAAMC,QAAQJ,GACnBE,EAAKG,SAAS,CAAET,KAAM,SAI1BU,eAAiB,SAACR,GAAU,IAClBE,EAAUF,EAAMG,OAAhBD,MAERE,EAAKG,SAAS,CAAET,KAAMI,6EAItB,OACEO,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBAEAF,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACVC,YAAY,yBACZX,MAAOY,KAAKjB,MAAMC,KAClBiB,WAAYD,KAAKf,eACjBiB,SAAUF,KAAKN,yBA/BHS,aC2FPC,6MAzFbC,oBAAsB,SAAAC,GAAgB,IAAbjB,EAAaiB,EAAbjB,OACjBkB,GAAMlB,EAAOkB,GAAGlB,EAAOkB,GAAGC,OAAS,IAGzCC,EAF4BnB,EAAKC,MAAzBkB,iBAEQF,MAGlBG,yBAA2B,SAAAC,GAAgB,IACnCC,EADmCD,EAAbtB,OACLwB,WAAWC,SAAS,GAAGP,GACxCQ,GAAUH,EAAQA,EAAQJ,OAAS,IAGzCQ,EAFwB1B,EAAKC,MAArByB,aAEI,CAACD,OAGfE,iBAAmB,SAAC/B,GAClBA,EAAMgC,oBAGRC,uBAAyB,SAAAC,GAAgB,IAAb/B,EAAa+B,EAAb/B,OACpBgC,EAAWhC,EAAOiC,QAAQ,MAC1BC,EAAWC,SAAS3B,cAAc,SAExC0B,EAASnC,MAAQC,EAAOoC,UACxBJ,EAASK,UAAUC,IAAI,WACvBJ,EAASG,UAAUC,IAAI,QACvBJ,EAASK,UAAYtC,EAAKuC,uBAC1BR,EAASS,OAAOP,MAGlBM,uBAAyB,SAAC3C,GAAU,IAC1BC,EAAQD,EAARC,IACAC,EAAUF,EAAMG,OAAhBD,MACF2C,EAAc7C,EAAMG,OAAOwB,WAAWC,SAAS,GAAGA,SAAS,GAAGP,GAC9DQ,GAAUgB,EAAYA,EAAYvB,OAAS,GAC3Ca,EAAWnC,EAAMG,OAAOwB,WAElB,UAAR1B,GACFG,EAAKC,MAAMyC,SAASjB,EAAQ3B,GAC5BiC,EAASK,UAAUO,OAAO,WAC1BZ,EAASa,YAAYhD,EAAMG,SACV,WAARF,IACTkC,EAASK,UAAUO,OAAO,WAC1BZ,EAASa,YAAYhD,EAAMG,kFAItB,IAAA8C,EAC0BnC,KAAKT,MAAM6C,KAApC7B,EADD4B,EACC5B,GAAI8B,EADLF,EACKE,MAAOC,EADZH,EACYG,UAEnB,OACE3C,EAAAC,EAAAC,cAAA,MAAIC,UAAWwC,EAAY,YAAc,IACvC3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACE0C,KAAK,WACLzC,UAAU,SACVS,GAAE,QAAAiC,OAAUjC,GACZkC,QAASH,EACTpC,SAAUF,KAAKK,sBAEjBV,EAAAC,EAAAC,cAAA,SACE6C,QAAO,QAAAF,OAAUjC,GACjBoC,QAAS3C,KAAKiB,iBACd2B,cAAe5C,KAAKmB,wBAEnBkB,GAEH1C,EAAAC,EAAAC,cAAA,UACE0C,KAAK,SACLzC,UAAU,UACV6C,QAAS3C,KAAKU,oCAvEHP,aCgKR0C,oNA5Jb9D,MAAQ,CACN+D,OAAQ,SAGVC,uBAAyB,WAAM,IAAAC,EACE1D,EAAKC,MAA5B0D,EADqBD,EACrBC,OAERjC,EAH6BgC,EACdhC,aAEHiC,EAAMH,OAAO,SAAAV,GAAI,OAAIA,EAAKE,YAAWY,IAAI,SAAAd,GAAI,OAAIA,EAAK7B,SAGpE4C,cAAgB,SAAA7C,GAAgB,IACxBwC,EADwBxC,EAAbjB,OACK+D,aAAa,QAAQC,MAAM,IAAM,MAEvD/D,EAAKG,SAAS,CACZqD,cAIJQ,gBAAkB,SAAA3C,GAAgB,IACxB8B,EADwB9B,EAAbtB,OACXoD,SAGRc,EAF4BjE,EAAKC,MAAzBgE,iBAEQd,4EAGT,IAAAe,EAMHxD,KAAKT,MAJP0D,EAFKO,EAELP,MACAxC,EAHK+C,EAGL/C,gBACAO,EAJKwC,EAILxC,YACAgB,EALKwB,EAKLxB,SAEMc,EAAW9C,KAAKjB,MAAhB+D,OAaFW,EAXsB,SAACC,EAAMC,GACjC,OAAQA,GACN,IAAK,YACH,OAAOC,OAAAC,EAAA,EAAAD,CAAIF,GAAMZ,OAAO,SAAAV,GAAI,OAAIA,EAAKE,YACvC,IAAK,SACH,OAAOsB,OAAAC,EAAA,EAAAD,CAAIF,GAAMZ,OAAO,SAAAV,GAAI,OAAKA,EAAKE,YACxC,QACE,OAAOsB,OAAAC,EAAA,EAAAD,CAAIF,IAIKI,CAAoBb,EAAOH,GAEjD,OACEnD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmE,SAAA,KACEpE,EAAAC,EAAAC,cAAA,WAASC,UAAU,OAAOkE,MAAO,CAAEC,QAAS,UAC1CtE,EAAAC,EAAAC,cAAA,SACE0C,KAAK,WACLhC,GAAG,aACHT,UAAU,aACV2C,QAASgB,EAAcS,MAAM,SAAA9B,GAAI,OAAIA,EAAKE,YAC1CpC,SAAUF,KAAKsD,kBAEhBG,EAAcjD,OACXb,EAAAC,EAAAC,cAAA,SAAO6C,QAAQ,cAAf,wBACA,KAGJ/C,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACX2D,EACEP,IAAI,SAAAd,GAAI,OACPzC,EAAAC,EAAAC,cAACsE,EAAD,CACE/B,KAAMA,EACNjD,IAAKiD,EAAK7B,GACVE,gBAAiBA,EACjBO,YAAaA,EACbgB,SAAUA,QAMpBrC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASkE,MAAO,CAAEC,QAAS,UAC3CtE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAhB,GAAA0C,OACMS,EAAMH,OAAO,SAAAV,GAAI,OAAKA,EAAKE,YAAW9B,OAD5C,gBAIAb,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WACZH,EAAAC,EAAAC,cAAA,UACc,QAAXiD,EAEGnD,EAAAC,EAAAC,cAAA,KACEuE,KAAK,KACLtE,UAAU,WACV6C,QAAS3C,KAAKmD,eAHhB,OAQAxD,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,KAAKzB,QAAS3C,KAAKmD,eAA3B,QAGNxD,EAAAC,EAAAC,cAAA,UACc,WAAXiD,EAEGnD,EAAAC,EAAAC,cAAA,KACEuE,KAAK,WACLtE,UAAU,WACV6C,QAAS3C,KAAKmD,eAHhB,UAOExD,EAAAC,EAAAC,cAAA,KAAGuE,KAAK,WAAWzB,QAAS3C,KAAKmD,eAAjC,WAGRxD,EAAAC,EAAAC,cAAA,UACc,cAAXiD,EAEGnD,EAAAC,EAAAC,cAAA,KACEuE,KAAK,cACLtE,UAAU,WACV6C,QAAS3C,KAAKmD,eAHhB,aAQAxD,EAAAC,EAAAC,cAAA,KACEuE,KAAK,cACLzB,QAAS3C,KAAKmD,eAFhB,eAURxD,EAAAC,EAAAC,cAAA,UACE0C,KAAK,SACLzC,UAAU,kBACVkE,MAAOf,EAAMoB,KAAK,SAAAjC,GAAI,OAAIA,EAAKE,YAC1B,CAAE2B,QAAS,SACX,CAAEA,QAAS,QAChBtB,QAAS3C,KAAK+C,kCAzIH5C,qkBC+ERmE,6MAjFbvF,MAAQ,CACNwF,UAAWC,aAAaC,QAAQ,SAArBb,OAAAC,EAAA,EAAAD,CACHc,KAAKC,MAAMH,aAAaC,QAAQ,WACpC,MAGNjF,QAAU,SAAC6C,GACT/C,EAAKG,SAAS,SAAAmF,GAAS,MACrB,CACEL,UAAS,GAAA/B,OAAAoB,OAAAC,EAAA,EAAAD,CAAMgB,EAAUL,WAAhB,CACP,CACEhE,GAAIqE,EAAUL,UACXrB,IAAI,SAAAd,GAAI,OAAIA,EAAK7B,KACjBsE,KAAK,SAACjF,EAAGkF,GAAJ,OAAUlF,EAAIkF,IAAGF,EAAUL,UAAU/D,OAAS,GAAK,GAAK,EAChE6B,QACAC,WAAW,WAOrBtB,YAAc,SAAC+D,GACbzF,EAAKG,SAAS,SAAAmF,GAAS,MACrB,CACEL,UAAWX,OAAAC,EAAA,EAAAD,CAAIgB,EAAUL,WACtBzB,OAAO,SAAAV,GAAI,OAAK2C,EAAIC,SAAS5C,EAAK7B,YAK3CE,gBAAkB,SAACF,GACjBjB,EAAKG,SAAS,SAAAmF,GAAS,MACrB,CACEL,UAAWX,OAAAC,EAAA,EAAAD,CAAIgB,EAAUL,WACtBrB,IAAI,SAAAd,GAAI,OAAKA,EAAK7B,KAAOA,EAAZ0E,EAAA,GACL7C,EADK,CACCE,WAAYF,EAAKE,YADlB2C,EAAA,GAEL7C,WAKjBmB,gBAAkB,SAAC2B,GACjB5F,EAAKG,SAAS,SAAAmF,GAAS,MAAK,CAC1BL,UAAWX,OAAAC,EAAA,EAAAD,CAAIgB,EAAUL,WACtBrB,IAAI,SAAAd,GAAI,OAAA6C,EAAA,GAAU7C,EAAV,CAAgBE,UAAW4C,YAK1ClD,SAAW,SAACzB,EAAI4E,GACd7F,EAAKG,SAAS,SAAAmF,GAAS,MAAK,CAC1BL,UAAWX,OAAAC,EAAA,EAAAD,CAAIgB,EAAUL,WACtBrB,IAAI,SAAAd,GAAI,OAAKA,EAAK7B,KAAOA,EAAZ0E,EAAA,GACL7C,EADK,CACCC,MAAO8C,IADRF,EAAA,GAEL7C,iFAKN,IACCmC,EAAcvE,KAAKjB,MAAnBwF,UAIR,OAFAC,aAAaY,QAAQ,QAASV,KAAKW,UAAUd,IAG3C5E,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAACyF,EAAD,CAAS9F,QAASQ,KAAKR,UAEvBG,EAAAC,EAAAC,cAAC0F,EAAD,CACEtC,MAAOsB,EACP9D,gBAAiBT,KAAKS,gBACtBO,YAAahB,KAAKgB,YAClBuC,gBAAiBvD,KAAKuD,gBACtBvB,SAAUhC,KAAKgC,mBA3EP7B,aCElBqF,IAASC,OACP9F,EAAAC,EAAAC,cAAC6F,EAAD,MACAlE,SAASmE,eAAe","file":"static/js/main.6dac320e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoApp extends Component {\n  state = {\n    task: '',\n  }\n\n  handlePressKey = (event) => {\n    const { key } = event;\n    const { value } = event.target;\n\n    if (key === 'Enter') {\n      this.props.addTodo(value);\n      this.setState({ task: '' });\n    }\n  }\n\n  handleOnChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({ task: value });\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={this.state.task}\n          onKeyPress={this.handlePressKey}\n          onChange={this.handleOnChange}\n        />\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n\nexport default TodoApp;\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n  handleClickCheckBox = ({ target }) => {\n    const id = +target.id[target.id.length - 1];\n    const { changeCompleted } = this.props;\n\n    changeCompleted(id);\n  }\n\n  handleClickButtonDestroy = ({ target }) => {\n    const idInput = target.parentNode.children[0].id;\n    const idTodo = +idInput[idInput.length - 1];\n    const { removeTodos } = this.props;\n\n    removeTodos([idTodo]);\n  }\n\n  handleLabelClick = (event) => {\n    event.preventDefault();\n  }\n\n  handleLableDoubleClick = ({ target }) => {\n    const parentLi = target.closest('li');\n    const newInput = document.createElement('input');\n\n    newInput.value = target.innerText;\n    parentLi.classList.add('editing');\n    newInput.classList.add('edit');\n    newInput.onkeydown = this.handlePressKeyNewInput;\n    parentLi.append(newInput);\n  }\n\n  handlePressKeyNewInput = (event) => {\n    const { key } = event;\n    const { value } = event.target;\n    const idMainInput = event.target.parentNode.children[0].children[0].id;\n    const idTodo = +idMainInput[idMainInput.length - 1];\n    const parentLi = event.target.parentNode;\n\n    if (key === 'Enter') {\n      this.props.editTask(idTodo, value);\n      parentLi.classList.remove('editing');\n      parentLi.removeChild(event.target);\n    } else if (key === 'Escape') {\n      parentLi.classList.remove('editing');\n      parentLi.removeChild(event.target);\n    }\n  }\n\n  render() {\n    const { id, title, completed } = this.props.item;\n\n    return (\n      <li className={completed ? 'completed' : ''}>\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            id={`todo-${id}`}\n            checked={completed}\n            onChange={this.handleClickCheckBox}\n          />\n          <label\n            htmlFor={`todo-${id}`}\n            onClick={this.handleLabelClick}\n            onDoubleClick={this.handleLableDoubleClick}\n          >\n            {title}\n          </label>\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={this.handleClickButtonDestroy}\n          />\n        </div>\n      </li>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodos: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n  state = {\n    filter: 'all',\n  }\n\n  handleClickButtonClear = () => {\n    const { items, removeTodos } = this.props;\n\n    removeTodos(items.filter(item => item.completed).map(item => item.id));\n  }\n\n  handleFilters = ({ target }) => {\n    const filter = target.getAttribute('href').slice(2) || 'all';\n\n    this.setState({\n      filter,\n    });\n  }\n\n  handleToogleAll = ({ target }) => {\n    const { checked } = target;\n    const { setCompletedAll } = this.props;\n\n    setCompletedAll(checked);\n  }\n\n  render() {\n    const {\n      items,\n      changeCompleted,\n      removeTodos,\n      editTask,\n    } = this.props;\n    const { filter } = this.state;\n\n    const createFilteredTodos = (list, switcher) => {\n      switch (switcher) {\n        case 'completed':\n          return [...list].filter(item => item.completed);\n        case 'active':\n          return [...list].filter(item => !item.completed);\n        default:\n          return [...list];\n      }\n    };\n\n    const filteredTodos = createFilteredTodos(items, filter);\n\n    return (\n      <>\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={filteredTodos.every(item => item.completed)}\n            onChange={this.handleToogleAll}\n          />\n          {filteredTodos.length\n            ? <label htmlFor=\"toggle-all\">Mark all as complete</label>\n            : null\n          }\n\n          <ul className=\"todo-list\">\n            {filteredTodos\n              .map(item => (\n                <TodoItem\n                  item={item}\n                  key={item.id}\n                  changeCompleted={changeCompleted}\n                  removeTodos={removeTodos}\n                  editTask={editTask}\n                />\n              ))}\n          </ul>\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {`${items.filter(item => !item.completed).length} items left`}\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              {filter === 'all'\n                ? (\n                  <a\n                    href=\"#/\"\n                    className=\"selected\"\n                    onClick={this.handleFilters}\n                  >\n                    All\n                  </a>\n                )\n                : <a href=\"#/\" onClick={this.handleFilters}>All</a>}\n            </li>\n\n            <li>\n              {filter === 'active'\n                ? (\n                  <a\n                    href=\"#/active\"\n                    className=\"selected\"\n                    onClick={this.handleFilters}\n                  >\n                    Active\n                  </a>\n                ) : <a href=\"#/active\" onClick={this.handleFilters}>Active</a>}\n            </li>\n\n            <li>\n              {filter === 'completed'\n                ? (\n                  <a\n                    href=\"#/completed\"\n                    className=\"selected\"\n                    onClick={this.handleFilters}\n                  >\n                    Completed\n                  </a>\n                ) : (\n                  <a\n                    href=\"#/completed\"\n                    onClick={this.handleFilters}\n                  >\n                    Completed\n                  </a>\n                )}\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            style={items.some(item => item.completed)\n              ? ({ display: 'block' })\n              : ({ display: 'none' })}\n            onClick={this.handleClickButtonClear}\n          />\n        </footer>\n      </>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    completed: PropTypes.bool,\n  })).isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n  removeTodos: PropTypes.func.isRequired,\n  setCompletedAll: PropTypes.func.isRequired,\n  editTask: PropTypes.func.isRequired,\n};\n\nexport default TodoList;\n","import React, { Component } from 'react';\nimport TodoApp from './components/TodoApp/TodoApp';\nimport TodoList from './components/TodoList/TodoList';\n\nclass App extends Component {\n  state = {\n    listTodos: localStorage.getItem('todos')\n      ? [...JSON.parse(localStorage.getItem('todos'))]\n      : [],\n  }\n\n  addTodo = (title) => {\n    this.setState(prevState => (\n      {\n        listTodos: [...prevState.listTodos,\n          {\n            id: prevState.listTodos\n              .map(item => item.id)\n              .sort((a, b) => a - b)[prevState.listTodos.length - 1] + 1 || 0,\n            title,\n            completed: false,\n          },\n        ],\n      }\n    ));\n  }\n\n  removeTodos = (ids) => {\n    this.setState(prevState => (\n      {\n        listTodos: [...prevState.listTodos]\n          .filter(item => !ids.includes(item.id)),\n      }\n    ));\n  }\n\n  changeCompleted = (id) => {\n    this.setState(prevState => (\n      {\n        listTodos: [...prevState.listTodos]\n          .map(item => (item.id === id\n            ? { ...item, completed: !item.completed }\n            : { ...item })),\n      }\n    ));\n  }\n\n  setCompletedAll = (stateCompleted) => {\n    this.setState(prevState => ({\n      listTodos: [...prevState.listTodos]\n        .map(item => ({ ...item, completed: stateCompleted })),\n    }\n    ));\n  }\n\n  editTask = (id, newTitle) => {\n    this.setState(prevState => ({\n      listTodos: [...prevState.listTodos]\n        .map(item => (item.id === id\n          ? { ...item, title: newTitle }\n          : { ...item }\n        )),\n    }));\n  }\n\n  render() {\n    const { listTodos } = this.state;\n\n    localStorage.setItem('todos', JSON.stringify(listTodos));\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp addTodo={this.addTodo} />\n\n        <TodoList\n          items={listTodos}\n          changeCompleted={this.changeCompleted}\n          removeTodos={this.removeTodos}\n          setCompletedAll={this.setCompletedAll}\n          editTask={this.editTask}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}